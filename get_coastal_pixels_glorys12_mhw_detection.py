{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "0bfd0864",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import xarray as xr\n",
    "import numpy as np\n",
    "from scipy.spatial import cKDTree\n",
    "import matplotlib.pyplot as plt\n",
    "from cartopy import config\n",
    "import cartopy.crs as ccrs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "10d3fe30-7e6c-4a5a-b9a4-3c8d1b74c557",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x7f57de63dfa0>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Generate some sample data\n",
    "x = np.linspace(0, 10, 100)\n",
    "y = np.sin(x)\n",
    "\n",
    "fig,ax = plt.subplots()\n",
    "# Plot the data\n",
    "ax.plot(x, y, label='sin(x)')\n",
    "\n",
    "# Add labels and a legend\n",
    "plt.xlabel('X-axis')\n",
    "plt.ylabel('Y-axis')\n",
    "plt.title('Simple Plot with Matplotlib')\n",
    "plt.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9e5434b2-b24b-4030-917b-c65e054f5f9e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d7445634-ba08-40d1-a82a-2b6d9b45a23b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<module 'xarray' (namespace)>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1e31b06c-a0bb-4a7d-905a-5dea67019f6e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<module 'xarray' (namespace)>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e9a23dc4",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "fname = '/home/shilpa/Downloads/GLO-MFC_001_030_mask_bathy.nc'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4455621c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "bathfile = xr.open_dataset(fname)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8ef7397d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body[data-theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block !important;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-index-preview {\n",
       "  grid-column: 2 / 5;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data,\n",
       ".xr-index-data-in:checked ~ .xr-index-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-index-name div,\n",
       ".xr-index-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2,\n",
       ".xr-no-icon {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;\n",
       "Dimensions:     (depth: 50, latitude: 2041, longitude: 4320)\n",
       "Coordinates:\n",
       "  * latitude    (latitude) float32 -80.0 -79.92 -79.83 ... 89.83 89.92 90.0\n",
       "  * longitude   (longitude) float32 -180.0 -179.9 -179.8 ... 179.8 179.8 179.9\n",
       "  * depth       (depth) float32 0.494 1.541 2.646 ... 5.275e+03 5.728e+03\n",
       "Data variables:\n",
       "    mask        (depth, latitude, longitude) int8 ...\n",
       "    deptho      (latitude, longitude) float32 ...\n",
       "    deptho_lev  (latitude, longitude) float32 ...\n",
       "Attributes: (12/13)\n",
       "    title:                Bathymetry and mask for product GLOBAL_REANALYSIS_P...\n",
       "    references:           http://marine.copernicus.eu\n",
       "    credit:               E.U. Copernicus Marine Service Information (CMEMS)\n",
       "    licence:              http://marine.copernicus.eu/services-portfolio/serv...\n",
       "    contact:              servicedesk.cmems@mercator-ocean.eu\n",
       "    producer:             CMEMS - Global Monitoring and Forecasting Centre\n",
       "    ...                   ...\n",
       "    Conventions:          CF-1.6\n",
       "    area:                 GLOBAL\n",
       "    source:               GLORYS12V1\n",
       "    product:              GLOBAL_REANALYSIS_PHY_001_030\n",
       "    dataset:              global-reanalysis-phy-001-030-statics\n",
       "    product_user_manual:  http://marine.copernicus.eu/documents/PUM/CMEMS-GLO...</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-732e1099-13a1-4329-8789-70486d8824bb' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-732e1099-13a1-4329-8789-70486d8824bb' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span class='xr-has-index'>depth</span>: 50</li><li><span class='xr-has-index'>latitude</span>: 2041</li><li><span class='xr-has-index'>longitude</span>: 4320</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-6a738de9-4e05-4648-b768-90ffd5636e96' class='xr-section-summary-in' type='checkbox'  checked><label for='section-6a738de9-4e05-4648-b768-90ffd5636e96' class='xr-section-summary' >Coordinates: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>latitude</span></div><div class='xr-var-dims'>(latitude)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>-80.0 -79.92 -79.83 ... 89.92 90.0</div><input id='attrs-18607172-19e0-4a35-9bb9-30c2f6078001' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-18607172-19e0-4a35-9bb9-30c2f6078001' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-107aa24e-6d9a-4b70-917e-1e3eb1ae4d19' class='xr-var-data-in' type='checkbox'><label for='data-107aa24e-6d9a-4b70-917e-1e3eb1ae4d19' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>step :</span></dt><dd>0.083333336</dd><dt><span>units :</span></dt><dd>degrees_north</dd><dt><span>standard_name :</span></dt><dd>latitude</dd><dt><span>axis :</span></dt><dd>Y</dd></dl></div><div class='xr-var-data'><pre>array([-80.      , -79.916664, -79.833336, ...,  89.833336,  89.916664,\n",
       "        90.      ], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>longitude</span></div><div class='xr-var-dims'>(longitude)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>-180.0 -179.9 ... 179.8 179.9</div><input id='attrs-d63f4318-b3f7-4ae7-a671-6aa45335b841' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-d63f4318-b3f7-4ae7-a671-6aa45335b841' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-3bff9329-af13-42d1-afee-4978c718e845' class='xr-var-data-in' type='checkbox'><label for='data-3bff9329-af13-42d1-afee-4978c718e845' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>step :</span></dt><dd>0.083333336</dd><dt><span>units :</span></dt><dd>degrees_east</dd><dt><span>standard_name :</span></dt><dd>longitude</dd><dt><span>axis :</span></dt><dd>X</dd></dl></div><div class='xr-var-data'><pre>array([-180.     , -179.91667, -179.83333, ...,  179.75   ,  179.83333,\n",
       "        179.91667], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>depth</span></div><div class='xr-var-dims'>(depth)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>0.494 1.541 ... 5.275e+03 5.728e+03</div><input id='attrs-acc5a5c5-4144-44fa-bb55-22d7a83bc9c9' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-acc5a5c5-4144-44fa-bb55-22d7a83bc9c9' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-7c3ab4a2-89f0-4833-aead-df146d2ab1c4' class='xr-var-data-in' type='checkbox'><label for='data-7c3ab4a2-89f0-4833-aead-df146d2ab1c4' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>units :</span></dt><dd>m</dd><dt><span>positive :</span></dt><dd>down</dd><dt><span>standard_name :</span></dt><dd>depth</dd><dt><span>axis :</span></dt><dd>Z</dd></dl></div><div class='xr-var-data'><pre>array([4.940250e-01, 1.541375e+00, 2.645669e+00, 3.819495e+00, 5.078224e+00,\n",
       "       6.440614e+00, 7.929560e+00, 9.572997e+00, 1.140500e+01, 1.346714e+01,\n",
       "       1.581007e+01, 1.849556e+01, 2.159882e+01, 2.521141e+01, 2.944473e+01,\n",
       "       3.443415e+01, 4.034405e+01, 4.737369e+01, 5.576429e+01, 6.580727e+01,\n",
       "       7.785385e+01, 9.232607e+01, 1.097293e+02, 1.306660e+02, 1.558507e+02,\n",
       "       1.861256e+02, 2.224752e+02, 2.660403e+02, 3.181274e+02, 3.802130e+02,\n",
       "       4.539377e+02, 5.410889e+02, 6.435668e+02, 7.633331e+02, 9.023393e+02,\n",
       "       1.062440e+03, 1.245291e+03, 1.452251e+03, 1.684284e+03, 1.941893e+03,\n",
       "       2.225078e+03, 2.533336e+03, 2.865703e+03, 3.220820e+03, 3.597032e+03,\n",
       "       3.992484e+03, 4.405224e+03, 4.833291e+03, 5.274784e+03, 5.727917e+03],\n",
       "      dtype=float32)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-ef792e38-d2d9-4503-8bc0-a9413b6f46c3' class='xr-section-summary-in' type='checkbox'  checked><label for='section-ef792e38-d2d9-4503-8bc0-a9413b6f46c3' class='xr-section-summary' >Data variables: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>mask</span></div><div class='xr-var-dims'>(depth, latitude, longitude)</div><div class='xr-var-dtype'>int8</div><div class='xr-var-preview xr-preview'>...</div><input id='attrs-08dff378-acff-4711-a026-e83d04f23eaf' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-08dff378-acff-4711-a026-e83d04f23eaf' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-bc4a722f-7227-4dd4-b4f7-323f578f7991' class='xr-var-data-in' type='checkbox'><label for='data-bc4a722f-7227-4dd4-b4f7-323f578f7991' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>Land-sea mask: 1 = sea ; 0 = land</dd><dt><span>standard_name :</span></dt><dd>sea_binary_mask</dd><dt><span>units :</span></dt><dd>1</dd></dl></div><div class='xr-var-data'><pre>[440856000 values with dtype=int8]</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>deptho</span></div><div class='xr-var-dims'>(latitude, longitude)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>...</div><input id='attrs-b49b7dcf-3638-45fe-a602-88834c1d02e8' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-b49b7dcf-3638-45fe-a602-88834c1d02e8' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-c4fb0e20-3734-4223-9495-4e20945cbea5' class='xr-var-data-in' type='checkbox'><label for='data-c4fb0e20-3734-4223-9495-4e20945cbea5' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>Bathymetry</dd><dt><span>standard_name :</span></dt><dd>sea_floor_depth_below_geoid</dd><dt><span>units :</span></dt><dd>m</dd></dl></div><div class='xr-var-data'><pre>[8817120 values with dtype=float32]</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>deptho_lev</span></div><div class='xr-var-dims'>(latitude, longitude)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>...</div><input id='attrs-2fb48168-0fcd-49b7-8540-c04231fd26cb' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-2fb48168-0fcd-49b7-8540-c04231fd26cb' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-56834c84-e218-4ba9-98f7-c2336b3c0324' class='xr-var-data-in' type='checkbox'><label for='data-56834c84-e218-4ba9-98f7-c2336b3c0324' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>Model level number at sea floor</dd><dt><span>standard_name :</span></dt><dd>model_level_number_at_sea_floor</dd><dt><span>units :</span></dt><dd>1</dd></dl></div><div class='xr-var-data'><pre>[8817120 values with dtype=float32]</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-84926924-e605-4a78-ac31-a85d3e42e6b5' class='xr-section-summary-in' type='checkbox'  ><label for='section-84926924-e605-4a78-ac31-a85d3e42e6b5' class='xr-section-summary' >Indexes: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>latitude</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-e292a99b-44d2-4801-abb2-440c906a31e5' class='xr-index-data-in' type='checkbox'/><label for='index-e292a99b-44d2-4801-abb2-440c906a31e5' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Float64Index([             -80.0, -79.91666412353516, -79.83333587646484,\n",
       "                          -79.75, -79.66666412353516, -79.58333587646484,\n",
       "                           -79.5, -79.41666412353516, -79.33333587646484,\n",
       "                          -79.25,\n",
       "              ...\n",
       "                           89.25,  89.33333587646484,  89.41666412353516,\n",
       "                            89.5,  89.58333587646484,  89.66666412353516,\n",
       "                           89.75,  89.83333587646484,  89.91666412353516,\n",
       "                            90.0],\n",
       "             dtype=&#x27;float64&#x27;, name=&#x27;latitude&#x27;, length=2041))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>longitude</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-667a1c06-b433-4e6f-8a06-83213f2c1bd6' class='xr-index-data-in' type='checkbox'/><label for='index-667a1c06-b433-4e6f-8a06-83213f2c1bd6' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Float64Index([            -180.0, -179.9166717529297, -179.8333282470703,\n",
       "                         -179.75, -179.6666717529297, -179.5833282470703,\n",
       "                          -179.5, -179.4166717529297, -179.3333282470703,\n",
       "                         -179.25,\n",
       "              ...\n",
       "               179.1666717529297,             179.25,  179.3333282470703,\n",
       "               179.4166717529297,              179.5,  179.5833282470703,\n",
       "               179.6666717529297,             179.75,  179.8333282470703,\n",
       "               179.9166717529297],\n",
       "             dtype=&#x27;float64&#x27;, name=&#x27;longitude&#x27;, length=4320))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>depth</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-d1fd4639-1730-4cc1-90da-ff1f0ca021d6' class='xr-index-data-in' type='checkbox'/><label for='index-d1fd4639-1730-4cc1-90da-ff1f0ca021d6' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Float64Index([0.49402499198913574,  1.5413750410079956,  2.6456689834594727,\n",
       "               3.8194949626922607,   5.078224182128906,   6.440614223480225,\n",
       "                 7.92956018447876,   9.572997093200684,  11.404999732971191,\n",
       "               13.467140197753906,  15.810070037841797,  18.495559692382812,\n",
       "               21.598819732666016,  25.211410522460938,  29.444730758666992,\n",
       "                34.43415069580078,  40.344051361083984,   47.37369155883789,\n",
       "                55.76428985595703,   65.80726623535156,   77.85385131835938,\n",
       "                 92.3260726928711,  109.72930145263672,  130.66600036621094,\n",
       "               155.85069274902344,  186.12559509277344,  222.47520446777344,\n",
       "                266.0403137207031,   318.1274108886719,   380.2130126953125,\n",
       "                453.9377136230469,   541.0889282226562,   643.5667724609375,\n",
       "                763.3331298828125,   902.3392944335938,    1062.43994140625,\n",
       "                   1245.291015625,     1452.2509765625,  1684.2840576171875,\n",
       "               1941.8929443359375,   2225.077880859375,        2533.3359375,\n",
       "                2865.702880859375,   3220.820068359375,   3597.031982421875,\n",
       "                 3992.48388671875,    4405.22412109375,      4833.291015625,\n",
       "                  5274.7841796875,     5727.9169921875],\n",
       "             dtype=&#x27;float64&#x27;, name=&#x27;depth&#x27;))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-29921575-7636-4c40-996f-4f664eae8807' class='xr-section-summary-in' type='checkbox'  ><label for='section-29921575-7636-4c40-996f-4f664eae8807' class='xr-section-summary' >Attributes: <span>(13)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>title :</span></dt><dd>Bathymetry and mask for product GLOBAL_REANALYSIS_PHY_001_030</dd><dt><span>references :</span></dt><dd>http://marine.copernicus.eu</dd><dt><span>credit :</span></dt><dd>E.U. Copernicus Marine Service Information (CMEMS)</dd><dt><span>licence :</span></dt><dd>http://marine.copernicus.eu/services-portfolio/service-commitments-and-licence/</dd><dt><span>contact :</span></dt><dd>servicedesk.cmems@mercator-ocean.eu</dd><dt><span>producer :</span></dt><dd>CMEMS - Global Monitoring and Forecasting Centre</dd><dt><span>institution :</span></dt><dd>Mercator Ocean</dd><dt><span>Conventions :</span></dt><dd>CF-1.6</dd><dt><span>area :</span></dt><dd>GLOBAL</dd><dt><span>source :</span></dt><dd>GLORYS12V1</dd><dt><span>product :</span></dt><dd>GLOBAL_REANALYSIS_PHY_001_030</dd><dt><span>dataset :</span></dt><dd>global-reanalysis-phy-001-030-statics</dd><dt><span>product_user_manual :</span></dt><dd>http://marine.copernicus.eu/documents/PUM/CMEMS-GLO-PUM-001-030.pdf</dd></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:     (depth: 50, latitude: 2041, longitude: 4320)\n",
       "Coordinates:\n",
       "  * latitude    (latitude) float32 -80.0 -79.92 -79.83 ... 89.83 89.92 90.0\n",
       "  * longitude   (longitude) float32 -180.0 -179.9 -179.8 ... 179.8 179.8 179.9\n",
       "  * depth       (depth) float32 0.494 1.541 2.646 ... 5.275e+03 5.728e+03\n",
       "Data variables:\n",
       "    mask        (depth, latitude, longitude) int8 ...\n",
       "    deptho      (latitude, longitude) float32 ...\n",
       "    deptho_lev  (latitude, longitude) float32 ...\n",
       "Attributes: (12/13)\n",
       "    title:                Bathymetry and mask for product GLOBAL_REANALYSIS_P...\n",
       "    references:           http://marine.copernicus.eu\n",
       "    credit:               E.U. Copernicus Marine Service Information (CMEMS)\n",
       "    licence:              http://marine.copernicus.eu/services-portfolio/serv...\n",
       "    contact:              servicedesk.cmems@mercator-ocean.eu\n",
       "    producer:             CMEMS - Global Monitoring and Forecasting Centre\n",
       "    ...                   ...\n",
       "    Conventions:          CF-1.6\n",
       "    area:                 GLOBAL\n",
       "    source:               GLORYS12V1\n",
       "    product:              GLOBAL_REANALYSIS_PHY_001_030\n",
       "    dataset:              global-reanalysis-phy-001-030-statics\n",
       "    product_user_manual:  http://marine.copernicus.eu/documents/PUM/CMEMS-GLO..."
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bathfile"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "a4c047cb",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "bathy = bathfile.deptho"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b5935dc1",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body[data-theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block !important;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-index-preview {\n",
       "  grid-column: 2 / 5;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data,\n",
       ".xr-index-data-in:checked ~ .xr-index-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-index-name div,\n",
       ".xr-index-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2,\n",
       ".xr-no-icon {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray &#x27;deptho&#x27; (latitude: 2041, longitude: 4320)&gt;\n",
       "[8817120 values with dtype=float32]\n",
       "Coordinates:\n",
       "  * latitude   (latitude) float32 -80.0 -79.92 -79.83 ... 89.83 89.92 90.0\n",
       "  * longitude  (longitude) float32 -180.0 -179.9 -179.8 ... 179.8 179.8 179.9\n",
       "Attributes:\n",
       "    long_name:      Bathymetry\n",
       "    standard_name:  sea_floor_depth_below_geoid\n",
       "    units:          m</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'>'deptho'</div><ul class='xr-dim-list'><li><span class='xr-has-index'>latitude</span>: 2041</li><li><span class='xr-has-index'>longitude</span>: 4320</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-4f5105f5-d714-49ab-9ff4-c8139384c501' class='xr-array-in' type='checkbox' checked><label for='section-4f5105f5-d714-49ab-9ff4-c8139384c501' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>...</span></div><div class='xr-array-data'><pre>[8817120 values with dtype=float32]</pre></div></div></li><li class='xr-section-item'><input id='section-056a6077-507f-495d-afd4-bddb4000a1cf' class='xr-section-summary-in' type='checkbox'  checked><label for='section-056a6077-507f-495d-afd4-bddb4000a1cf' class='xr-section-summary' >Coordinates: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>latitude</span></div><div class='xr-var-dims'>(latitude)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>-80.0 -79.92 -79.83 ... 89.92 90.0</div><input id='attrs-f511585a-ef0f-478a-8b59-f4df0bfef4a3' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-f511585a-ef0f-478a-8b59-f4df0bfef4a3' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-c4446b7a-de7f-4f80-9b17-045fea79e88f' class='xr-var-data-in' type='checkbox'><label for='data-c4446b7a-de7f-4f80-9b17-045fea79e88f' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>step :</span></dt><dd>0.083333336</dd><dt><span>units :</span></dt><dd>degrees_north</dd><dt><span>standard_name :</span></dt><dd>latitude</dd><dt><span>axis :</span></dt><dd>Y</dd></dl></div><div class='xr-var-data'><pre>array([-80.      , -79.916664, -79.833336, ...,  89.833336,  89.916664,\n",
       "        90.      ], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>longitude</span></div><div class='xr-var-dims'>(longitude)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>-180.0 -179.9 ... 179.8 179.9</div><input id='attrs-b5deb433-8707-407e-9720-e9338ea896de' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-b5deb433-8707-407e-9720-e9338ea896de' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-bc49da57-1dd4-49ff-953a-bd06002e8706' class='xr-var-data-in' type='checkbox'><label for='data-bc49da57-1dd4-49ff-953a-bd06002e8706' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>step :</span></dt><dd>0.083333336</dd><dt><span>units :</span></dt><dd>degrees_east</dd><dt><span>standard_name :</span></dt><dd>longitude</dd><dt><span>axis :</span></dt><dd>X</dd></dl></div><div class='xr-var-data'><pre>array([-180.     , -179.91667, -179.83333, ...,  179.75   ,  179.83333,\n",
       "        179.91667], dtype=float32)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-f9eae415-bb26-4309-9df1-0d054aa3bb5b' class='xr-section-summary-in' type='checkbox'  ><label for='section-f9eae415-bb26-4309-9df1-0d054aa3bb5b' class='xr-section-summary' >Indexes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>latitude</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-6072e3a4-4cd4-49cb-b7eb-7cd23e206ca2' class='xr-index-data-in' type='checkbox'/><label for='index-6072e3a4-4cd4-49cb-b7eb-7cd23e206ca2' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Float64Index([             -80.0, -79.91666412353516, -79.83333587646484,\n",
       "                          -79.75, -79.66666412353516, -79.58333587646484,\n",
       "                           -79.5, -79.41666412353516, -79.33333587646484,\n",
       "                          -79.25,\n",
       "              ...\n",
       "                           89.25,  89.33333587646484,  89.41666412353516,\n",
       "                            89.5,  89.58333587646484,  89.66666412353516,\n",
       "                           89.75,  89.83333587646484,  89.91666412353516,\n",
       "                            90.0],\n",
       "             dtype=&#x27;float64&#x27;, name=&#x27;latitude&#x27;, length=2041))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>longitude</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-f06bb340-8565-4370-aea6-fffce300f263' class='xr-index-data-in' type='checkbox'/><label for='index-f06bb340-8565-4370-aea6-fffce300f263' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Float64Index([            -180.0, -179.9166717529297, -179.8333282470703,\n",
       "                         -179.75, -179.6666717529297, -179.5833282470703,\n",
       "                          -179.5, -179.4166717529297, -179.3333282470703,\n",
       "                         -179.25,\n",
       "              ...\n",
       "               179.1666717529297,             179.25,  179.3333282470703,\n",
       "               179.4166717529297,              179.5,  179.5833282470703,\n",
       "               179.6666717529297,             179.75,  179.8333282470703,\n",
       "               179.9166717529297],\n",
       "             dtype=&#x27;float64&#x27;, name=&#x27;longitude&#x27;, length=4320))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-1d27dab8-1434-45ce-9e94-6578cfaa8241' class='xr-section-summary-in' type='checkbox'  checked><label for='section-1d27dab8-1434-45ce-9e94-6578cfaa8241' class='xr-section-summary' >Attributes: <span>(3)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>Bathymetry</dd><dt><span>standard_name :</span></dt><dd>sea_floor_depth_below_geoid</dd><dt><span>units :</span></dt><dd>m</dd></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<xarray.DataArray 'deptho' (latitude: 2041, longitude: 4320)>\n",
       "[8817120 values with dtype=float32]\n",
       "Coordinates:\n",
       "  * latitude   (latitude) float32 -80.0 -79.92 -79.83 ... 89.83 89.92 90.0\n",
       "  * longitude  (longitude) float32 -180.0 -179.9 -179.8 ... 179.8 179.8 179.9\n",
       "Attributes:\n",
       "    long_name:      Bathymetry\n",
       "    standard_name:  sea_floor_depth_below_geoid\n",
       "    units:          m"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "bathy\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "8fa2a20d",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "data_crs = ccrs.PlateCarree(central_longitude=0)\n",
    "\n",
    "# But you want the map to include the dateline.\n",
    "proj_crs = ccrs.PlateCarree(central_longitude=180)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "d0748ae0",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "lat = bathy.latitude\n",
    "lon = bathy.longitude"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f34d21c8",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "xx,yy = np.meshgrid(lon,lat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1e8b5cec",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "depth = np.array(bathy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "20d46007",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-34.875, -2.375)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(subplot_kw={'projection': proj_crs},figsize=(12,5))\n",
    "im = ax.contourf(xx,yy,depth,transform=data_crs,\n",
    "               transform_first=True) \n",
    "ax.set_xlim(-35,29) #-35\n",
    "ax.set_ylim(-34.875,-2.375)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2650e973",
   "metadata": {},
   "source": [
    "To create a new mask that includes locations closest to the land mask where the depth is equal to 50m, you can use the following approach:\n",
    "\n",
    "- Find the indices of locations where the depth is equal to 50m.\n",
    "- For each of these locations, find the nearest land point using the land mask.\n",
    "- Create a new mask that includes these nearest land points.\n",
    "\n",
    "Here's a step-by-step example using xarray and scipy's distance functions:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6c3b6b34-bef0-4bfa-8778-5cc8683c9540",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "land_mask = bathfile['mask']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "10bf8b58-7647-4f3d-ab8e-e8a4e96366e5",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "land = np.array(land_mask)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "40aa1fde-169f-4f35-a201-72264de52b94",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(50, 2041, 4320)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "land.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "ec40f076-244a-4e99-8fb9-fffa863653dc",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-34.875, -2.375)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(subplot_kw={'projection': proj_crs},figsize=(12,5))\n",
    "im = ax.contourf(xx,yy,land[0,:,:], transform=data_crs,\n",
    "               transform_first=True)\n",
    "ax.set_xlim(-35,29) #-35\n",
    "ax.set_ylim(-34.875,-2.375)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "c052b184-8c51-4f3f-8dfe-c34474f4f34b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "depth_50m_locations = bathfile.where(bathy == 50, drop=True).stack(points=('latitude', 'longitude'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a9c8bf37-d47c-4b6e-8e04-d5e33ae76505",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "lat_lon_50m = np.array([depth_50m_locations['latitude'].values, depth_50m_locations['longitude'].values]).T"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "df7d797f-90b0-4a3a-a01c-0e0b065c925c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "depth_mask = (bathfile['deptho'] >= 50)\n",
    "\n",
    "# Apply the mask to your original data\n",
    "#masked_data = bathfile.where(depth_mask, drop=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "680f2dc6-98bb-403f-9a74-f12f9043e399",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2041, 4320)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "depth_mask.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "98ff581f-f2c5-46bb-8dc7-cb1d9f19a845",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#depth_50_array = np.array(depth_mask)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "67824268-eaa2-49a5-bc6d-a0bebab1a93f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body[data-theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block !important;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-index-preview {\n",
       "  grid-column: 2 / 5;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data,\n",
       ".xr-index-data-in:checked ~ .xr-index-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-index-name div,\n",
       ".xr-index-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2,\n",
       ".xr-no-icon {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;xarray.DataArray &#x27;deptho&#x27; (latitude: 2041, longitude: 4320)&gt;\n",
       "array([[False, False, False, ..., False, False, False],\n",
       "       [False, False, False, ..., False, False, False],\n",
       "       [False, False, False, ..., False, False, False],\n",
       "       ...,\n",
       "       [ True,  True,  True, ...,  True,  True,  True],\n",
       "       [ True,  True,  True, ...,  True,  True,  True],\n",
       "       [ True,  True,  True, ...,  True,  True,  True]])\n",
       "Coordinates:\n",
       "  * latitude   (latitude) float32 -80.0 -79.92 -79.83 ... 89.83 89.92 90.0\n",
       "  * longitude  (longitude) float32 -180.0 -179.9 -179.8 ... 179.8 179.8 179.9</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.DataArray</div><div class='xr-array-name'>'deptho'</div><ul class='xr-dim-list'><li><span class='xr-has-index'>latitude</span>: 2041</li><li><span class='xr-has-index'>longitude</span>: 4320</li></ul></div><ul class='xr-sections'><li class='xr-section-item'><div class='xr-array-wrap'><input id='section-b501a573-7a9e-428f-802b-6450cb482f34' class='xr-array-in' type='checkbox' checked><label for='section-b501a573-7a9e-428f-802b-6450cb482f34' title='Show/hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-array-preview xr-preview'><span>False False False False False False ... True True True True True True</span></div><div class='xr-array-data'><pre>array([[False, False, False, ..., False, False, False],\n",
       "       [False, False, False, ..., False, False, False],\n",
       "       [False, False, False, ..., False, False, False],\n",
       "       ...,\n",
       "       [ True,  True,  True, ...,  True,  True,  True],\n",
       "       [ True,  True,  True, ...,  True,  True,  True],\n",
       "       [ True,  True,  True, ...,  True,  True,  True]])</pre></div></div></li><li class='xr-section-item'><input id='section-c2dd0161-d4aa-4210-9ccf-dad4e5e6fe74' class='xr-section-summary-in' type='checkbox'  checked><label for='section-c2dd0161-d4aa-4210-9ccf-dad4e5e6fe74' class='xr-section-summary' >Coordinates: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>latitude</span></div><div class='xr-var-dims'>(latitude)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>-80.0 -79.92 -79.83 ... 89.92 90.0</div><input id='attrs-987ca166-eab7-4102-98fc-43c2f11da216' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-987ca166-eab7-4102-98fc-43c2f11da216' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-ca574d1b-1bfb-4ad3-b3ed-2f6e4511ede3' class='xr-var-data-in' type='checkbox'><label for='data-ca574d1b-1bfb-4ad3-b3ed-2f6e4511ede3' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>step :</span></dt><dd>0.083333336</dd><dt><span>units :</span></dt><dd>degrees_north</dd><dt><span>standard_name :</span></dt><dd>latitude</dd><dt><span>axis :</span></dt><dd>Y</dd></dl></div><div class='xr-var-data'><pre>array([-80.      , -79.916664, -79.833336, ...,  89.833336,  89.916664,\n",
       "        90.      ], dtype=float32)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>longitude</span></div><div class='xr-var-dims'>(longitude)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>-180.0 -179.9 ... 179.8 179.9</div><input id='attrs-02aea0a1-4955-4d21-9fef-654151b11d28' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-02aea0a1-4955-4d21-9fef-654151b11d28' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-39b671f7-499f-498e-9fd1-e30a1e76316c' class='xr-var-data-in' type='checkbox'><label for='data-39b671f7-499f-498e-9fd1-e30a1e76316c' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>step :</span></dt><dd>0.083333336</dd><dt><span>units :</span></dt><dd>degrees_east</dd><dt><span>standard_name :</span></dt><dd>longitude</dd><dt><span>axis :</span></dt><dd>X</dd></dl></div><div class='xr-var-data'><pre>array([-180.     , -179.91667, -179.83333, ...,  179.75   ,  179.83333,\n",
       "        179.91667], dtype=float32)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-bfb06dca-0635-44da-be92-036829644f86' class='xr-section-summary-in' type='checkbox'  ><label for='section-bfb06dca-0635-44da-be92-036829644f86' class='xr-section-summary' >Indexes: <span>(2)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>latitude</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-be8b010c-2a7a-4c34-8dd7-75f0cf75232d' class='xr-index-data-in' type='checkbox'/><label for='index-be8b010c-2a7a-4c34-8dd7-75f0cf75232d' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Float64Index([             -80.0, -79.91666412353516, -79.83333587646484,\n",
       "                          -79.75, -79.66666412353516, -79.58333587646484,\n",
       "                           -79.5, -79.41666412353516, -79.33333587646484,\n",
       "                          -79.25,\n",
       "              ...\n",
       "                           89.25,  89.33333587646484,  89.41666412353516,\n",
       "                            89.5,  89.58333587646484,  89.66666412353516,\n",
       "                           89.75,  89.83333587646484,  89.91666412353516,\n",
       "                            90.0],\n",
       "             dtype=&#x27;float64&#x27;, name=&#x27;latitude&#x27;, length=2041))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>longitude</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-e12920fc-2748-4302-90a6-6a63b13faebe' class='xr-index-data-in' type='checkbox'/><label for='index-e12920fc-2748-4302-90a6-6a63b13faebe' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Float64Index([            -180.0, -179.9166717529297, -179.8333282470703,\n",
       "                         -179.75, -179.6666717529297, -179.5833282470703,\n",
       "                          -179.5, -179.4166717529297, -179.3333282470703,\n",
       "                         -179.25,\n",
       "              ...\n",
       "               179.1666717529297,             179.25,  179.3333282470703,\n",
       "               179.4166717529297,              179.5,  179.5833282470703,\n",
       "               179.6666717529297,             179.75,  179.8333282470703,\n",
       "               179.9166717529297],\n",
       "             dtype=&#x27;float64&#x27;, name=&#x27;longitude&#x27;, length=4320))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-036264d0-1023-47ce-b93f-ac63634a66c3' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-036264d0-1023-47ce-b93f-ac63634a66c3' class='xr-section-summary'  title='Expand/collapse section'>Attributes: <span>(0)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<xarray.DataArray 'deptho' (latitude: 2041, longitude: 4320)>\n",
       "array([[False, False, False, ..., False, False, False],\n",
       "       [False, False, False, ..., False, False, False],\n",
       "       [False, False, False, ..., False, False, False],\n",
       "       ...,\n",
       "       [ True,  True,  True, ...,  True,  True,  True],\n",
       "       [ True,  True,  True, ...,  True,  True,  True],\n",
       "       [ True,  True,  True, ...,  True,  True,  True]])\n",
       "Coordinates:\n",
       "  * latitude   (latitude) float32 -80.0 -79.92 -79.83 ... 89.83 89.92 90.0\n",
       "  * longitude  (longitude) float32 -180.0 -179.9 -179.8 ... 179.8 179.8 179.9"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "depth_mask"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "7665bd13-c9fc-4d6f-aabf-63fd76b4b024",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(-34.875, -2.375)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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KBRAdwEAgLVdpD6ArWl2Z+5T/AsIAACkIihkrAkVIfwWGg4/BgAASzH0aGVjJyoP6UQAAMBUgkLGjoUCYQEAgKUZepQ5oQAAgBR0FAAAgIigUCidBgAAliQoAAAAEUEBAACICAoAAEDEqkcFsukaAABL01EAAAAiggIAABARFAAAgIigAAAARASFwpjIDADAGgSFgggJAACsRVAAAAAiggIAABARFAAAgIigAAAARAQFAAAgIigAAAARQQEAAIgICgAAQERQKMjj/W3qQwAAYCMEBQAAICIoAAAAEUGhMIYfAQCwBkEBAACICAoF0lUAAGBpgkJBbu4ews3dQ+rDAABgAwSFwugmAACwBkGhIEICAABrERQAAICIoFAo3QUAAJYkKAAAABFBAQAAiAgKAABARFAAAAAiggIAABARFAAAgIigAAAARAQFAAAgIigUzKZrAAAsRVAAAAAiggIAABARFAAAgIigAAAARAQFAAAgIigAAAARQQEAAIgICgAAQERQABb1eH9rc0AAKJCgULCbu4fUhwAnNQHBuQoA5REUgEUJCQBQJkEBWIyQAADlEhQAAICIoFAod2oBAFiSoAAAAEQEBQAAICIoFMiwIwAAliYoAAAAEUEBAACICAoAAEBEUCiM+QkAAKxBUAAAACKCAgAAEBEUAACAiKBQEPMTAABYi6AAAABEBAUAACAiKBTCsCMAANYkKAAAABFBAQAAiAgKAABARFAAAAAigkIBTGQGAGBtggIAABARFAAAgIigAAAARAQFAAAgIihkzkRmAABSEBQAAICIoAAAAEQEBQAAICIoZMz8BAAAUhEUMiUkAACQkqAAAABEBIUM6SYAAJCaoJAZIQEAgBwICgAAQERQAAAAIoJCRgw7AgAgF4ICAAAQERQyoZsAAEBOBIUMCAkAAORGUEhMSAAAIEeCQkJCAgAAubpIfQBbIxwAAFACHYUVCQkAAJRCUFiJkAAAQEkEhRUICQAAlEZQAAAAIoICAAAQserRggw5AgCgVDoKAABARFBYiG4CAAAlExQAAICIoLAA3QQAAEonKAAAABFBYWa6CQAA1EBQAAAAIoLCjHQTAACohaAwEyEBAICaCAozEBIAAKiNoAAAAEQEBQAAICIoAAAAkYvUB1A68xNg2x7vb//+/64HANRER2ECRQFw6PH+9ovgAAAlExQAJri5e3DTAIAqCQoAMzgMC7oKANRg0ByF//v8aanjKNLu4y71IQAZ+ad/+5/w9P37EEIIP/3HuxBCCO++/SnlIQHAFz7/7XPvx77a7/f7cw/69OlTePfuXfj5558nHRgAAJDW27dvw9PTU3jz5s3Jx/UKCiH8GhZ2O3fQAQCgZJeXl2dDQggDggIAALAdJjMDAAARQQEAAIgICgAAQERQAAAAIoICAAAQERQAAICIoAAAAET+H5x+94Tgj60VAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1200x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots(subplot_kw={'projection': proj_crs},figsize=(12,5))\n",
    "im = ax.contourf(xx,yy,depth_mask, transform=data_crs,\n",
    "               transform_first=True)\n",
    "ax.set_xlim(-35,29) #-35\n",
    "ax.set_ylim(-34.875,-2.375)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "d1824e23-3556-4461-a10d-c3b513d88c68",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Dimensions {None} do not exist. Expected one or more of ('latitude', 'longitude')",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[31], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m depth_true_indices \u001b[38;5;241m=\u001b[39m \u001b[43mnp\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43margwhere\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdepth_mask\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m      3\u001b[0m \u001b[38;5;66;03m# Get the lat, lon coordinates corresponding to the True indices\u001b[39;00m\n\u001b[1;32m      4\u001b[0m latitudes \u001b[38;5;241m=\u001b[39m bathfile[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mlatitude\u001b[39m\u001b[38;5;124m'\u001b[39m]\u001b[38;5;241m.\u001b[39mvalues[depth_true_indices[:, \u001b[38;5;241m1\u001b[39m]]\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.9/site-packages/numpy/core/numeric.py:608\u001b[0m, in \u001b[0;36margwhere\u001b[0;34m(a)\u001b[0m\n\u001b[1;32m    606\u001b[0m     \u001b[38;5;66;03m# then remove the added dimension\u001b[39;00m\n\u001b[1;32m    607\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m argwhere(a)[:,:\u001b[38;5;241m0\u001b[39m]\n\u001b[0;32m--> 608\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mtranspose\u001b[49m\u001b[43m(\u001b[49m\u001b[43mnonzero\u001b[49m\u001b[43m(\u001b[49m\u001b[43ma\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.9/site-packages/numpy/core/fromnumeric.py:655\u001b[0m, in \u001b[0;36mtranspose\u001b[0;34m(a, axes)\u001b[0m\n\u001b[1;32m    588\u001b[0m \u001b[38;5;129m@array_function_dispatch\u001b[39m(_transpose_dispatcher)\n\u001b[1;32m    589\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mtranspose\u001b[39m(a, axes\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[1;32m    590\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    591\u001b[0m \u001b[38;5;124;03m    Returns an array with axes transposed.\u001b[39;00m\n\u001b[1;32m    592\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    653\u001b[0m \n\u001b[1;32m    654\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 655\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_wrapfunc\u001b[49m\u001b[43m(\u001b[49m\u001b[43ma\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43mtranspose\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxes\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.9/site-packages/numpy/core/fromnumeric.py:59\u001b[0m, in \u001b[0;36m_wrapfunc\u001b[0;34m(obj, method, *args, **kwds)\u001b[0m\n\u001b[1;32m     56\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m _wrapit(obj, method, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n\u001b[1;32m     58\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m---> 59\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mbound\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     60\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m     61\u001b[0m     \u001b[38;5;66;03m# A TypeError occurs if the object does have such a method in its\u001b[39;00m\n\u001b[1;32m     62\u001b[0m     \u001b[38;5;66;03m# class, but its signature is not identical to that of NumPy's. This\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m     66\u001b[0m     \u001b[38;5;66;03m# Call _wrapit from within the except clause to ensure a potential\u001b[39;00m\n\u001b[1;32m     67\u001b[0m     \u001b[38;5;66;03m# exception has a traceback chain.\u001b[39;00m\n\u001b[1;32m     68\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m _wrapit(obj, method, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwds)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.9/site-packages/xarray-0.0.0-py3.9.egg/xarray/core/dataarray.py:3027\u001b[0m, in \u001b[0;36mDataArray.transpose\u001b[0;34m(self, transpose_coords, missing_dims, *dims)\u001b[0m\n\u001b[1;32m   2994\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"Return a new DataArray object with transposed dimensions.\u001b[39;00m\n\u001b[1;32m   2995\u001b[0m \n\u001b[1;32m   2996\u001b[0m \u001b[38;5;124;03mParameters\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m   3024\u001b[0m \u001b[38;5;124;03mDataset.transpose\u001b[39;00m\n\u001b[1;32m   3025\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m   3026\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m dims:\n\u001b[0;32m-> 3027\u001b[0m     dims \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mtuple\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mutils\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43minfix_dims\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdims\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdims\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmissing_dims\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m   3028\u001b[0m variable \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mvariable\u001b[38;5;241m.\u001b[39mtranspose(\u001b[38;5;241m*\u001b[39mdims)\n\u001b[1;32m   3029\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m transpose_coords:\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.9/site-packages/xarray-0.0.0-py3.9.egg/xarray/core/utils.py:870\u001b[0m, in \u001b[0;36minfix_dims\u001b[0;34m(dims_supplied, dims_all, missing_dims)\u001b[0m\n\u001b[1;32m    868\u001b[0m             \u001b[38;5;28;01myield\u001b[39;00m d\n\u001b[1;32m    869\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 870\u001b[0m     existing_dims \u001b[38;5;241m=\u001b[39m \u001b[43mdrop_missing_dims\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdims_supplied\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mdims_all\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mmissing_dims\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    871\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mset\u001b[39m(existing_dims) \u001b[38;5;241m^\u001b[39m \u001b[38;5;28mset\u001b[39m(dims_all):\n\u001b[1;32m    872\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    873\u001b[0m             \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdims_supplied\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m must be a permuted list of \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdims_all\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m, unless `...` is included\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    874\u001b[0m         )\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.9/site-packages/xarray-0.0.0-py3.9.egg/xarray/core/utils.py:962\u001b[0m, in \u001b[0;36mdrop_missing_dims\u001b[0;34m(supplied_dims, dims, missing_dims)\u001b[0m\n\u001b[1;32m    960\u001b[0m     invalid \u001b[38;5;241m=\u001b[39m supplied_dims_set \u001b[38;5;241m-\u001b[39m \u001b[38;5;28mset\u001b[39m(dims)\n\u001b[1;32m    961\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m invalid:\n\u001b[0;32m--> 962\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    963\u001b[0m             \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mDimensions \u001b[39m\u001b[38;5;132;01m{\u001b[39;00minvalid\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m do not exist. Expected one or more of \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdims\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    964\u001b[0m         )\n\u001b[1;32m    966\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m supplied_dims\n\u001b[1;32m    968\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m missing_dims \u001b[38;5;241m==\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mwarn\u001b[39m\u001b[38;5;124m\"\u001b[39m:\n",
      "\u001b[0;31mValueError\u001b[0m: Dimensions {None} do not exist. Expected one or more of ('latitude', 'longitude')"
     ]
    }
   ],
   "source": [
    "depth_true_indices = np.argwhere(depth_mask)\n",
    "\n",
    "# Get the lat, lon coordinates corresponding to the True indices\n",
    "latitudes = bathfile['latitude'].values[depth_true_indices[:, 1]]\n",
    "longitudes = bathfile['longitude'].values[depth_true_indices[:, 2]]\n",
    "\n",
    "# Combine latitudes and longitudes into a single array\n",
    "coordinates = np.column_stack((latitudes, longitudes))\n",
    "\n",
    "# Flatten the land variable to 1D\n",
    "flattened_land = land_mask.values.flatten()\n",
    "\n",
    "# Find the indices of land points using a boolean mask\n",
    "land_indices = np.where(flattened_land == 1)[0]\n",
    "\n",
    "# Get the lat, lon coordinates of land points\n",
    "land_latitudes = land_mask['latitude'].values.flatten()[land_indices]\n",
    "land_longitudes = land_mask['longitude'].values.flatten()[land_indices]\n",
    "\n",
    "# Combine land coordinates into a single array\n",
    "land_coordinates = np.column_stack((land_latitudes, land_longitudes))\n",
    "\n",
    "# Use cKDTree for nearest neighbor search\n",
    "tree = cKDTree(land_coordinates)\n",
    "\n",
    "# Find the indices of the nearest land points for each depth point\n",
    "_, nearest_land_indices = tree.query(coordinates)\n",
    "\n",
    "# Get the corresponding depth indices\n",
    "nearest_depth_indices = depth_true_indices[nearest_land_indices]\n",
    "\n",
    "# Access the original data at these indices\n",
    "resulting_data = bathy.isel(latitude=nearest_depth_indices[:, 1], longitude=nearest_depth_indices[:, 2])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "85e556cb-9779-4343-92aa-706622c7609c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "#depth_50m_locations = your_xarray_dataset.where(depth == 50, drop=True).stack(points=('lat', 'lon'))\n",
    "\n",
    "# Extract coordinates of these locations\n",
    "#lat_lon_50m = np.array([depth_50m_locations['latitude'].values, depth_50m_locations['longitude'].values]).T\n",
    "\n",
    "# Extract coordinates of land points\n",
    "land_lat_lon = np.column_stack(np.where(land_mask))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0451cbad",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Use cKDTree to find the indices of the nearest land points for each 50m depth location\n",
    "tree = cKDTree(land_lat_lon)\n",
    "_, land_indices = tree.query(lat_lon_50m)\n",
    "\n",
    "# Create a new mask with locations closest to land where depth is equal to 50m\n",
    "new_mask = xr.full_like(land_mask, False, dtype=bool)\n",
    "flat_indices = np.unravel_index(land_indices, land_mask.shape)\n",
    "new_mask.values[flat_indices] = True\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e290dee",
   "metadata": {},
   "outputs": [],
   "source": [
    "bathfile['new_mask'] = xr.where(new_mask, 1, 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c5489f57-83a9-469d-997e-d12a177a0754",
   "metadata": {},
   "outputs": [],
   "source": [
    "new_mask2 = np.array(bathfile['new_mask'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6c1477a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(subplot_kw={'projection': proj_crs},figsize=(22,10))\n",
    "im = ax.contourf(xx,yy,new_mask2, transform=data_crs,\n",
    "               transform_first=True)\n",
    "ax.set_xlim(-35,29) #-35\n",
    "ax.set_ylim(-34.875,-2.375)\n",
    "plt.savefig('/home/shilpa/glory_mat_analysis/landmask_50m.png')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
